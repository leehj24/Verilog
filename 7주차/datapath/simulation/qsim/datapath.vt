// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2022 13:47:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_sample_tst(
	clk,
	load,
	reset,
	shift,
	subshift,
	word1,
	word2,
	sampler_tx
);
input  clk;
input  load;
input  reset;
input  shift;
input  subshift;
input [7:0] word1;
input [3:0] word2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or load or reset or shift or subshift or word1 or word2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_vlg_check_tst (
	lt,
	quotient,
	remainder,
	sampler_rx
);
input  lt;
input [3:0] quotient;
input [3:0] remainder;
input sampler_rx;

reg  lt_expected;
reg [3:0] quotient_expected;
reg [3:0] remainder_expected;

reg  lt_prev;
reg [3:0] quotient_prev;
reg [3:0] remainder_prev;

reg  lt_expected_prev;
reg [3:0] quotient_expected_prev;
reg [3:0] remainder_expected_prev;

reg  last_lt_exp;
reg [3:0] last_quotient_exp;
reg [3:0] last_remainder_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	lt_prev = lt;
	quotient_prev = quotient;
	remainder_prev = remainder;
end

// update expected /o prevs

always @(trigger)
begin
	lt_expected_prev = lt_expected;
	quotient_expected_prev = quotient_expected;
	remainder_expected_prev = remainder_expected;
end



// expected lt
initial
begin
	lt_expected = 1'bX;
end 
// expected quotient[ 3 ]
always
begin
	quotient_expected[3] = 1'b0;
	quotient_expected[3] = #25000 1'b1;
	#25000;
end 
// expected quotient[ 2 ]
always
begin
	quotient_expected[2] = 1'b0;
	quotient_expected[2] = #25000 1'b1;
	#25000;
end 
// expected quotient[ 1 ]
always
begin
	quotient_expected[1] = 1'b0;
	quotient_expected[1] = #25000 1'b1;
	#25000;
end 
// expected quotient[ 0 ]
always
begin
	quotient_expected[0] = 1'b0;
	quotient_expected[0] = #25000 1'b1;
	#25000;
end 
// expected remainder[ 3 ]
initial
begin
	repeat(33)
	begin
		remainder_expected[3] = 1'b0;
		remainder_expected[3] = #15000 1'b1;
		# 15000;
	end
	remainder_expected[3] = 1'b0;
end 
// expected remainder[ 2 ]
initial
begin
	repeat(33)
	begin
		remainder_expected[2] = 1'b0;
		remainder_expected[2] = #15000 1'b1;
		# 15000;
	end
	remainder_expected[2] = 1'b0;
end 
// expected remainder[ 1 ]
initial
begin
	repeat(33)
	begin
		remainder_expected[1] = 1'b0;
		remainder_expected[1] = #15000 1'b1;
		# 15000;
	end
	remainder_expected[1] = 1'b0;
end 
// expected remainder[ 0 ]
initial
begin
	repeat(33)
	begin
		remainder_expected[0] = 1'b0;
		remainder_expected[0] = #15000 1'b1;
		# 15000;
	end
	remainder_expected[0] = 1'b0;
end 
// generate trigger
always @(lt_expected or lt or quotient_expected or quotient or remainder_expected or remainder)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lt = %b | expected quotient = %b | expected remainder = %b | ",lt_expected_prev,quotient_expected_prev,remainder_expected_prev);
	$display("| real lt = %b | real quotient = %b | real remainder = %b | ",lt_prev,quotient_prev,remainder_prev);
`endif
	if (
		( lt_expected_prev !== 1'bx ) && ( lt_prev !== lt_expected_prev )
		&& ((lt_expected_prev !== last_lt_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lt_expected_prev);
		$display ("     Real value = %b", lt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lt_exp = lt_expected_prev;
	end
	if (
		( quotient_expected_prev[0] !== 1'bx ) && ( quotient_prev[0] !== quotient_expected_prev[0] )
		&& ((quotient_expected_prev[0] !== last_quotient_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotient_exp[0] = quotient_expected_prev[0];
	end
	if (
		( quotient_expected_prev[1] !== 1'bx ) && ( quotient_prev[1] !== quotient_expected_prev[1] )
		&& ((quotient_expected_prev[1] !== last_quotient_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotient_exp[1] = quotient_expected_prev[1];
	end
	if (
		( quotient_expected_prev[2] !== 1'bx ) && ( quotient_prev[2] !== quotient_expected_prev[2] )
		&& ((quotient_expected_prev[2] !== last_quotient_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotient_exp[2] = quotient_expected_prev[2];
	end
	if (
		( quotient_expected_prev[3] !== 1'bx ) && ( quotient_prev[3] !== quotient_expected_prev[3] )
		&& ((quotient_expected_prev[3] !== last_quotient_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotient_exp[3] = quotient_expected_prev[3];
	end
	if (
		( remainder_expected_prev[0] !== 1'bx ) && ( remainder_prev[0] !== remainder_expected_prev[0] )
		&& ((remainder_expected_prev[0] !== last_remainder_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainder_exp[0] = remainder_expected_prev[0];
	end
	if (
		( remainder_expected_prev[1] !== 1'bx ) && ( remainder_prev[1] !== remainder_expected_prev[1] )
		&& ((remainder_expected_prev[1] !== last_remainder_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainder_exp[1] = remainder_expected_prev[1];
	end
	if (
		( remainder_expected_prev[2] !== 1'bx ) && ( remainder_prev[2] !== remainder_expected_prev[2] )
		&& ((remainder_expected_prev[2] !== last_remainder_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainder_exp[2] = remainder_expected_prev[2];
	end
	if (
		( remainder_expected_prev[3] !== 1'bx ) && ( remainder_prev[3] !== remainder_expected_prev[3] )
		&& ((remainder_expected_prev[3] !== last_remainder_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainder_exp[3] = remainder_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg load;
reg reset;
reg shift;
reg subshift;
reg [7:0] word1;
reg [3:0] word2;
// wires                                               
wire lt;
wire [3:0] quotient;
wire [3:0] remainder;

wire sampler;                             

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.load(load),
	.lt(lt),
	.quotient(quotient),
	.remainder(remainder),
	.reset(reset),
	.shift(shift),
	.subshift(subshift),
	.word1(word1),
	.word2(word2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// load
initial
begin
	repeat(33)
	begin
		load = 1'b0;
		load = #15000 1'b1;
		# 15000;
	end
	load = 1'b0;
end 

// reset
always
begin
	reset = 1'b0;
	reset = #25000 1'b1;
	#25000;
end 

// shift
always
begin
	shift = 1'b0;
	shift = #25000 1'b1;
	#25000;
end 

// subshift
initial
begin
	subshift = 1'b0;
end 
// word1[ 7 ]
always
begin
	word1[7] = 1'b0;
	word1[7] = #25000 1'b1;
	#25000;
end 
// word1[ 6 ]
always
begin
	word1[6] = 1'b0;
	word1[6] = #25000 1'b1;
	#25000;
end 
// word1[ 5 ]
always
begin
	word1[5] = 1'b0;
	word1[5] = #25000 1'b1;
	#25000;
end 
// word1[ 4 ]
always
begin
	word1[4] = 1'b0;
	word1[4] = #25000 1'b1;
	#25000;
end 
// word1[ 3 ]
always
begin
	word1[3] = 1'b0;
	word1[3] = #25000 1'b1;
	#25000;
end 
// word1[ 2 ]
always
begin
	word1[2] = 1'b0;
	word1[2] = #25000 1'b1;
	#25000;
end 
// word1[ 1 ]
always
begin
	word1[1] = 1'b0;
	word1[1] = #25000 1'b1;
	#25000;
end 
// word1[ 0 ]
always
begin
	word1[0] = 1'b0;
	word1[0] = #25000 1'b1;
	#25000;
end 
// word2[ 3 ]
always
begin
	word2[3] = 1'b0;
	word2[3] = #25000 1'b1;
	#25000;
end 
// word2[ 2 ]
always
begin
	word2[2] = 1'b0;
	word2[2] = #25000 1'b1;
	#25000;
end 
// word2[ 1 ]
always
begin
	word2[1] = 1'b0;
	word2[1] = #25000 1'b1;
	#25000;
end 
// word2[ 0 ]
always
begin
	word2[0] = 1'b0;
	word2[0] = #25000 1'b1;
	#25000;
end 

datapath_vlg_sample_tst tb_sample (
	.clk(clk),
	.load(load),
	.reset(reset),
	.shift(shift),
	.subshift(subshift),
	.word1(word1),
	.word2(word2),
	.sampler_tx(sampler)
);

datapath_vlg_check_tst tb_out(
	.lt(lt),
	.quotient(quotient),
	.remainder(remainder),
	.sampler_rx(sampler)
);
endmodule

