module controller (clk, reset, start, lt, load, shift, subshift, ready);
	input clk, reset, start, lt;
	output load, shift, subshift, ready;
	
	reg overflow;
	reg state;
	reg [1:0] count;
	localparam S0 = 0, S1 = 1;

	always @ (posedge clk or posedge reset)  	// State transitions
		if (reset) begin state <= S0; count <= 0; end
		else 
			case (state)
			 S0: if (start) begin state <= S1; count <= 3; end
			 S1: if (count==0) state <= S0;
				 else count <= count - 1;
			endcase
		
 // control output logic
	assign load = (state==S0) && start; 
	assign shift = (state==S1) && lt;
	assign subshift = (state==S1) && ~lt;
	assign ready = (state==S0) && ~reset;
endmodule
