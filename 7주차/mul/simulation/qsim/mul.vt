// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2022 19:10:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mul
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mul_vlg_sample_tst(
	clk,
	reset,
	start,
	word1,
	word2,
	sampler_tx
);
input  clk;
input  reset;
input  start;
input [3:0] word1;
input [3:0] word2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or start or word1 or word2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mul_vlg_check_tst (
	product,
	ready,
	sampler_rx
);
input [7:0] product;
input  ready;
input sampler_rx;

reg [7:0] product_expected;
reg  ready_expected;

reg [7:0] product_prev;
reg  ready_prev;

reg [7:0] product_expected_prev;
reg  ready_expected_prev;

reg [7:0] last_product_exp;
reg  last_ready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	product_prev = product;
	ready_prev = ready;
end

// update expected /o prevs

always @(trigger)
begin
	product_expected_prev = product_expected;
	ready_expected_prev = ready_expected;
end


// expected product[ 7 ]
initial
begin
	product_expected[7] = 1'bX;
end 
// expected product[ 6 ]
initial
begin
	product_expected[6] = 1'bX;
end 
// expected product[ 5 ]
initial
begin
	product_expected[5] = 1'bX;
end 
// expected product[ 4 ]
initial
begin
	product_expected[4] = 1'bX;
end 
// expected product[ 3 ]
initial
begin
	product_expected[3] = 1'bX;
end 
// expected product[ 2 ]
initial
begin
	product_expected[2] = 1'bX;
end 
// expected product[ 1 ]
initial
begin
	product_expected[1] = 1'bX;
end 
// expected product[ 0 ]
initial
begin
	product_expected[0] = 1'bX;
end 

// expected ready
initial
begin
	ready_expected = 1'bX;
end 
// generate trigger
always @(product_expected or product or ready_expected or ready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected product = %b | expected ready = %b | ",product_expected_prev,ready_expected_prev);
	$display("| real product = %b | real ready = %b | ",product_prev,ready_prev);
`endif
	if (
		( product_expected_prev[0] !== 1'bx ) && ( product_prev[0] !== product_expected_prev[0] )
		&& ((product_expected_prev[0] !== last_product_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[0] = product_expected_prev[0];
	end
	if (
		( product_expected_prev[1] !== 1'bx ) && ( product_prev[1] !== product_expected_prev[1] )
		&& ((product_expected_prev[1] !== last_product_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[1] = product_expected_prev[1];
	end
	if (
		( product_expected_prev[2] !== 1'bx ) && ( product_prev[2] !== product_expected_prev[2] )
		&& ((product_expected_prev[2] !== last_product_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[2] = product_expected_prev[2];
	end
	if (
		( product_expected_prev[3] !== 1'bx ) && ( product_prev[3] !== product_expected_prev[3] )
		&& ((product_expected_prev[3] !== last_product_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[3] = product_expected_prev[3];
	end
	if (
		( product_expected_prev[4] !== 1'bx ) && ( product_prev[4] !== product_expected_prev[4] )
		&& ((product_expected_prev[4] !== last_product_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[4] = product_expected_prev[4];
	end
	if (
		( product_expected_prev[5] !== 1'bx ) && ( product_prev[5] !== product_expected_prev[5] )
		&& ((product_expected_prev[5] !== last_product_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[5] = product_expected_prev[5];
	end
	if (
		( product_expected_prev[6] !== 1'bx ) && ( product_prev[6] !== product_expected_prev[6] )
		&& ((product_expected_prev[6] !== last_product_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[6] = product_expected_prev[6];
	end
	if (
		( product_expected_prev[7] !== 1'bx ) && ( product_prev[7] !== product_expected_prev[7] )
		&& ((product_expected_prev[7] !== last_product_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_exp[7] = product_expected_prev[7];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mul_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg start;
reg [3:0] word1;
reg [3:0] word2;
// wires                                               
wire [7:0] product;
wire ready;

wire sampler;                             

// assign statements (if any)                          
mul i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.product(product),
	.ready(ready),
	.reset(reset),
	.start(start),
	.word1(word1),
	.word2(word2)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #50000 1'b1;
	start = #80000 1'b0;
end 
// word1[ 3 ]
initial
begin
	word1[3] = 1'b1;
	word1[3] = #120000 1'b0;
end 
// word1[ 2 ]
initial
begin
	word1[2] = 1'b1;
	word1[2] = #120000 1'b0;
end 
// word1[ 1 ]
initial
begin
	word1[1] = 1'b0;
end 
// word1[ 0 ]
initial
begin
	word1[0] = 1'b0;
	word1[0] = #20000 1'b1;
	word1[0] = #100000 1'b0;
end 
// word2[ 3 ]
initial
begin
	word2[3] = 1'b1;
	word2[3] = #120000 1'b0;
end 
// word2[ 2 ]
initial
begin
	word2[2] = 1'b0;
end 
// word2[ 1 ]
initial
begin
	word2[1] = 1'b1;
	word2[1] = #120000 1'b0;
end 
// word2[ 0 ]
initial
begin
	word2[0] = 1'b0;
	word2[0] = #20000 1'b1;
	word2[0] = #100000 1'b0;
end 

mul_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.start(start),
	.word1(word1),
	.word2(word2),
	.sampler_tx(sampler)
);

mul_vlg_check_tst tb_out(
	.product(product),
	.ready(ready),
	.sampler_rx(sampler)
);
endmodule

