// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2022 09:31:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    textlcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module textlcd_vlg_sample_tst(
	CLK_50,
	KEY,
	sampler_tx
);
input  CLK_50;
input [3:0] KEY;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_50 or KEY)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module textlcd_vlg_check_tst (
	LCD_BLON,
	LCD_D,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	sampler_rx
);
input  LCD_BLON;
input [7:0] LCD_D;
input  LCD_EN;
input  LCD_ON;
input  LCD_RS;
input  LCD_RW;
input sampler_rx;

reg  LCD_BLON_expected;
reg [7:0] LCD_D_expected;
reg  LCD_EN_expected;
reg  LCD_ON_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;

reg  LCD_BLON_prev;
reg [7:0] LCD_D_prev;
reg  LCD_EN_prev;
reg  LCD_ON_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;

reg  LCD_BLON_expected_prev;
reg [7:0] LCD_D_expected_prev;
reg  LCD_EN_expected_prev;
reg  LCD_ON_expected_prev;
reg  LCD_RS_expected_prev;
reg  LCD_RW_expected_prev;

reg  last_LCD_BLON_exp;
reg [7:0] last_LCD_D_exp;
reg  last_LCD_EN_exp;
reg  last_LCD_ON_exp;
reg  last_LCD_RS_exp;
reg  last_LCD_RW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	LCD_BLON_prev = LCD_BLON;
	LCD_D_prev = LCD_D;
	LCD_EN_prev = LCD_EN;
	LCD_ON_prev = LCD_ON;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
end

// update expected /o prevs

always @(trigger)
begin
	LCD_BLON_expected_prev = LCD_BLON_expected;
	LCD_D_expected_prev = LCD_D_expected;
	LCD_EN_expected_prev = LCD_EN_expected;
	LCD_ON_expected_prev = LCD_ON_expected;
	LCD_RS_expected_prev = LCD_RS_expected;
	LCD_RW_expected_prev = LCD_RW_expected;
end



// expected LCD_RS
initial
begin
	LCD_RS_expected = 1'b1;
	LCD_RS_expected = #100000 1'b0;
	LCD_RS_expected = #420000 1'b1;
end 
// expected LCD_D[ 7 ]
initial
begin
	LCD_D_expected[7] = 1'b0;
	LCD_D_expected[7] = #120000 1'b1;
	LCD_D_expected[7] = #480000 1'b0;
end 
// expected LCD_D[ 6 ]
initial
begin
	LCD_D_expected[6] = 1'b0;
	LCD_D_expected[6] = #120000 1'b1;
	LCD_D_expected[6] = #480000 1'b0;
end 
// expected LCD_D[ 5 ]
initial
begin
	LCD_D_expected[5] = 1'b0;
	LCD_D_expected[5] = #120000 1'b1;
	LCD_D_expected[5] = #480000 1'b0;
end 
// expected LCD_D[ 4 ]
initial
begin
	LCD_D_expected[4] = 1'b0;
	LCD_D_expected[4] = #120000 1'b1;
	LCD_D_expected[4] = #480000 1'b0;
end 
// expected LCD_D[ 3 ]
initial
begin
	LCD_D_expected[3] = 1'b0;
	LCD_D_expected[3] = #120000 1'b1;
	LCD_D_expected[3] = #480000 1'b0;
end 
// expected LCD_D[ 2 ]
initial
begin
	LCD_D_expected[2] = 1'b0;
	LCD_D_expected[2] = #120000 1'b1;
	LCD_D_expected[2] = #480000 1'b0;
end 
// expected LCD_D[ 1 ]
initial
begin
	LCD_D_expected[1] = 1'b0;
	LCD_D_expected[1] = #120000 1'b1;
	LCD_D_expected[1] = #480000 1'b0;
end 
// expected LCD_D[ 0 ]
initial
begin
	LCD_D_expected[0] = 1'b0;
	LCD_D_expected[0] = #120000 1'b1;
	LCD_D_expected[0] = #480000 1'b0;
end 

// expected LCD_RW
initial
begin
	LCD_RW_expected = 1'bX;
end 

// expected LCD_BLON
initial
begin
	LCD_BLON_expected = 1'bX;
end 

// expected LCD_EN
initial
begin
	LCD_EN_expected = 1'bX;
end 

// expected LCD_ON
initial
begin
	LCD_ON_expected = 1'bX;
end 
// generate trigger
always @(LCD_BLON_expected or LCD_BLON or LCD_D_expected or LCD_D or LCD_EN_expected or LCD_EN or LCD_ON_expected or LCD_ON or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LCD_BLON = %b | expected LCD_D = %b | expected LCD_EN = %b | expected LCD_ON = %b | expected LCD_RS = %b | expected LCD_RW = %b | ",LCD_BLON_expected_prev,LCD_D_expected_prev,LCD_EN_expected_prev,LCD_ON_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev);
	$display("| real LCD_BLON = %b | real LCD_D = %b | real LCD_EN = %b | real LCD_ON = %b | real LCD_RS = %b | real LCD_RW = %b | ",LCD_BLON_prev,LCD_D_prev,LCD_EN_prev,LCD_ON_prev,LCD_RS_prev,LCD_RW_prev);
`endif
	if (
		( LCD_BLON_expected_prev !== 1'bx ) && ( LCD_BLON_prev !== LCD_BLON_expected_prev )
		&& ((LCD_BLON_expected_prev !== last_LCD_BLON_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_BLON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_BLON_expected_prev);
		$display ("     Real value = %b", LCD_BLON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_BLON_exp = LCD_BLON_expected_prev;
	end
	if (
		( LCD_D_expected_prev[0] !== 1'bx ) && ( LCD_D_prev[0] !== LCD_D_expected_prev[0] )
		&& ((LCD_D_expected_prev[0] !== last_LCD_D_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[0] = LCD_D_expected_prev[0];
	end
	if (
		( LCD_D_expected_prev[1] !== 1'bx ) && ( LCD_D_prev[1] !== LCD_D_expected_prev[1] )
		&& ((LCD_D_expected_prev[1] !== last_LCD_D_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[1] = LCD_D_expected_prev[1];
	end
	if (
		( LCD_D_expected_prev[2] !== 1'bx ) && ( LCD_D_prev[2] !== LCD_D_expected_prev[2] )
		&& ((LCD_D_expected_prev[2] !== last_LCD_D_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[2] = LCD_D_expected_prev[2];
	end
	if (
		( LCD_D_expected_prev[3] !== 1'bx ) && ( LCD_D_prev[3] !== LCD_D_expected_prev[3] )
		&& ((LCD_D_expected_prev[3] !== last_LCD_D_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[3] = LCD_D_expected_prev[3];
	end
	if (
		( LCD_D_expected_prev[4] !== 1'bx ) && ( LCD_D_prev[4] !== LCD_D_expected_prev[4] )
		&& ((LCD_D_expected_prev[4] !== last_LCD_D_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[4] = LCD_D_expected_prev[4];
	end
	if (
		( LCD_D_expected_prev[5] !== 1'bx ) && ( LCD_D_prev[5] !== LCD_D_expected_prev[5] )
		&& ((LCD_D_expected_prev[5] !== last_LCD_D_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[5] = LCD_D_expected_prev[5];
	end
	if (
		( LCD_D_expected_prev[6] !== 1'bx ) && ( LCD_D_prev[6] !== LCD_D_expected_prev[6] )
		&& ((LCD_D_expected_prev[6] !== last_LCD_D_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[6] = LCD_D_expected_prev[6];
	end
	if (
		( LCD_D_expected_prev[7] !== 1'bx ) && ( LCD_D_prev[7] !== LCD_D_expected_prev[7] )
		&& ((LCD_D_expected_prev[7] !== last_LCD_D_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_D[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_D_expected_prev);
		$display ("     Real value = %b", LCD_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_D_exp[7] = LCD_D_expected_prev[7];
	end
	if (
		( LCD_EN_expected_prev !== 1'bx ) && ( LCD_EN_prev !== LCD_EN_expected_prev )
		&& ((LCD_EN_expected_prev !== last_LCD_EN_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_EN_expected_prev);
		$display ("     Real value = %b", LCD_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LCD_EN_exp = LCD_EN_expected_prev;
	end
	if (
		( LCD_ON_expected_prev !== 1'bx ) && ( LCD_ON_prev !== LCD_ON_expected_prev )
		&& ((LCD_ON_expected_prev !== last_LCD_ON_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_ON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_ON_expected_prev);
		$display ("     Real value = %b", LCD_ON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LCD_ON_exp = LCD_ON_expected_prev;
	end
	if (
		( LCD_RS_expected_prev !== 1'bx ) && ( LCD_RS_prev !== LCD_RS_expected_prev )
		&& ((LCD_RS_expected_prev !== last_LCD_RS_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RS_expected_prev);
		$display ("     Real value = %b", LCD_RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LCD_RS_exp = LCD_RS_expected_prev;
	end
	if (
		( LCD_RW_expected_prev !== 1'bx ) && ( LCD_RW_prev !== LCD_RW_expected_prev )
		&& ((LCD_RW_expected_prev !== last_LCD_RW_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RW_expected_prev);
		$display ("     Real value = %b", LCD_RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LCD_RW_exp = LCD_RW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module textlcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50;
reg [3:0] KEY;
// wires                                               
wire LCD_BLON;
wire [7:0] LCD_D;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;

wire sampler;                             

// assign statements (if any)                          
textlcd i1 (
// port map - connection between master ports and signals/registers   
	.CLK_50(CLK_50),
	.KEY(KEY),
	.LCD_BLON(LCD_BLON),
	.LCD_D(LCD_D),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW)
);

// CLK_50
always
begin
	CLK_50 = 1'b0;
	CLK_50 = #20000 1'b1;
	#20000;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b0;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b0;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #100000 1'b1;
	KEY[1] = #360000 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #60000 1'b1;
	KEY[0] = #40000 1'b0;
	KEY[0] = #120000 1'b1;
	KEY[0] = #240000 1'b0;
end 

textlcd_vlg_sample_tst tb_sample (
	.CLK_50(CLK_50),
	.KEY(KEY),
	.sampler_tx(sampler)
);

textlcd_vlg_check_tst tb_out(
	.LCD_BLON(LCD_BLON),
	.LCD_D(LCD_D),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.sampler_rx(sampler)
);
endmodule

